// Code generated by go2go; DO NOT EDIT.


//line article_test.go2:1
package example

//line article_test.go2:1
import (
//line article_test.go2:1
 "fmt"
//line article_test.go2:1
 "github.com/k-yomo/fixtory"
//line article_test.go2:1
 "reflect"
//line article_test.go2:1
 "testing"
//line article_test.go2:1
 "time"
//line article_test.go2:1
)

//line article_test.go2:11
var authorBluePrint = func(i int, last Author) Author {
	num := i + 1
	return Author{
		ID:   num,
		Name: fmt.Sprintf("Author %d", num),
	}
}

var articleBluePrint = func(i int, last Article) Article {
	num := i + 1
	return Article{
		ID:                 num,
		Title:              fmt.Sprintf("Article %d", i+1),
		AuthorID:           num,
		PublishScheduledAt: time.Now().Add(-1 * time.Hour),
		PublishedAt:        time.Now().Add(-1 * time.Hour),
		LikeCount:          15,
	}
}

var articleTraitDraft = Article{
	Status: ArticleStatusDraft,
}

var articleTraitPublishScheduled = Article{
	Status:             ArticleStatusOpen,
	PublishScheduledAt: time.Now().Add(1 * time.Hour),
}

var articleTraitPublished = Article{
	Status:             ArticleStatusOpen,
	PublishScheduledAt: time.Now().Add(-1 * time.Hour),
	PublishedAt:        time.Now().Add(-1 * time.Hour),
	LikeCount:          15,
}

func TestArticleList_SelectPublished(t *testing.T) {
				articleFactory := instantiate୦fixtory୦NewFactory୦example୮aArticle(t, Article{})

				articleFactory.OnBuild = func(t *testing.T, article *Article) { fmt.Println("Insert to db here") }

//line article_test.go2:53
 waitReview, publishedScheduled, published := articleFactory.NewBuilder(articleBluePrint).
					EachParam(articleTraitDraft, articleTraitPublishScheduled, articleTraitPublished).
					ResetAfter().
					Build3()

	tests := []struct {
		name string
		list ArticleList
		want ArticleList
	}{
		{
			name: "returns only published articles",
			list: ArticleList{waitReview, publishedScheduled, published},
			want: ArticleList{published},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.list.SelectPublished(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SelectPublished() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestArticleList_SelectAuthoredBy(t *testing.T) {
	authorFactory := instantiate୦fixtory୦NewFactory୦example୮aAuthor(t, Author{})
	articleFactory := instantiate୦fixtory୦NewFactory୦example୮aArticle(t, Article{})

	author1, author2 := authorFactory.NewBuilder(authorBluePrint).Build2()
	articlesAuthoredBy1 := articleFactory.NewBuilder(articleBluePrint, Article{AuthorID: author1.ID}).BuildList(4)
	articleAuthoredBy2 := articleFactory.NewBuilder(articleBluePrint, Article{AuthorID: author2.ID}).Build()

	type args struct {
		authorID int
	}
	tests := []struct {
		name string
		list ArticleList
		args args
		want ArticleList
	}{
		{
			name: "returns articles authored by author 1",
			list: append(articlesAuthoredBy1, articleAuthoredBy2),
			args: args{authorID: author1.ID},
			want: articlesAuthoredBy1,
		},
		{
			name: "returns articles authored by author 2",
			list: append(articlesAuthoredBy1, articleAuthoredBy2),
			args: args{authorID: author2.ID},
			want: ArticleList{articleAuthoredBy2},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.list.SelectAuthoredBy(tt.args.authorID); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("SelectAuthoredBy() = %v, want %v", got, tt.want)
			}
		})
	}
}
//line article.go2:37
func instantiate୦fixtory୦NewFactory୦example୮aArticle(t *testing.T,
	v Article,) *instantiate୦fixtory୦Factory୦example୮aArticle {
//line article.go2:38
 return &instantiate୦fixtory୦Factory୦example୮aArticle{t: t, productType: reflect.
//line article.go2:40
  PtrTo(reflect.TypeOf(v)), index: 0, last: v}
//line article.go2:40
}
//line article.go2:37
func instantiate୦fixtory୦NewFactory୦example୮aAuthor(t *testing.T,
	v Author,) *instantiate୦fixtory୦Factory୦example୮aAuthor {
//line article.go2:38
 return &instantiate୦fixtory୦Factory୦example୮aAuthor{t: t, productType: reflect.
//line article.go2:40
  PtrTo(reflect.TypeOf(v)), index: 0, last: v}
//line article.go2:40
}

//line article.go2:40
type instantiate୦fixtory୦Factory୦example୮aArticle struct {
//line article.go2:15
 t           *testing.T
//line article.go2:15
 productType reflect.
					Type
			last        Article

//line article.go2:24
 index int
	OnBuild func(t *testing.T, v *Article,)
//line article.go2:27
}

//line article.go2:40
func (uf *instantiate୦fixtory୦Factory୦example୮aArticle,) NewBuilder(bluePrint instantiate୦fixtory୦BluePrintFunc୦example୮aArticle, traits ...Article,) *instantiate୦fixtory୦Builder୦example୮aArticle {
//line article.go2:44
 return &instantiate୦fixtory୦Builder୦example୮aArticle{factory: uf, bluePrint: bluePrint, traits: traits}
//line article.go2:47
}
//line article.go2:47
func (uf *instantiate୦fixtory୦Factory୦example୮aArticle,) Reset() {
	uf.last = reflect.New(uf.productType.Elem()).Elem().Interface().(Article)
	uf.index = 0
//line article.go2:49
}

//line article.go2:49
type instantiate୦fixtory୦Factory୦example୮aAuthor struct {
//line article.go2:15
 t           *testing.T
//line article.go2:15
 productType reflect.
					Type
			last        Author

//line article.go2:24
 index int
	OnBuild func(t *testing.T, v *Author,)
//line article.go2:27
}

//line article.go2:40
func (uf *instantiate୦fixtory୦Factory୦example୮aAuthor,) NewBuilder(bluePrint instantiate୦fixtory୦BluePrintFunc୦example୮aAuthor, traits ...Author,) *instantiate୦fixtory୦Builder୦example୮aAuthor {
//line article.go2:44
 return &instantiate୦fixtory୦Builder୦example୮aAuthor{factory: uf, bluePrint: bluePrint, traits: traits}
//line article.go2:47
}
//line article.go2:47
func (uf *instantiate୦fixtory୦Factory୦example୮aAuthor,) Reset() {
	uf.last = reflect.New(uf.productType.Elem()).Elem().Interface().(Author)
	uf.index = 0
//line article.go2:49
}

//line article.go2:49
type instantiate୦fixtory୦BluePrintFunc୦example୮aArticle func(i int, last Article,) Article
//line article.go2:11
type instantiate୦fixtory୦Builder୦example୮aArticle struct {
//line article.go2:28
 factory *instantiate୦fixtory୦Factory୦example୮aArticle

			index     int
//line article.go2:33
 bluePrint func(i int, last Article,
	) Article
//line article.go2:34
 traits          []Article
			eachParam       []Article
			zeroFields      []string
//line article.go2:36
 resetAfterBuild bool
}

//line article.go2:49
func (b *instantiate୦fixtory୦Builder୦example୮aArticle,
) EachParam(params ...Article,) *instantiate୦fixtory୦Builder୦example୮aArticle {
	b.eachParam = params
	return b
//line article.go2:52
}
//line article.go2:52
func (b *instantiate୦fixtory୦Builder୦example୮aArticle,) Zero(fields ...string) *instantiate୦fixtory୦Builder୦example୮aArticle {
	b.zeroFields = fields
	return b
}
func (b *instantiate୦fixtory୦Builder୦example୮aArticle) ResetAfter() *instantiate୦fixtory୦Builder୦example୮aArticle {
	b.resetAfterBuild = true
	return b
}
func (b *instantiate୦fixtory୦Builder୦example୮aArticle) Build() *Article {
	b.index = 0
	product := b.build()
	if b.resetAfterBuild {
		b.factory.Reset()
	}
	return product
}
func (b *instantiate୦fixtory୦Builder୦example୮aArticle) Build2() (*Article, *Article) {
	list := b.BuildList(2)
	return list[0], list[1]
}
func (b *instantiate୦fixtory୦Builder୦example୮aArticle) Build3() (*Article, *Article, *Article) {
	list := b.BuildList(3)
	return list[0], list[1], list[2]
}
func (b *instantiate୦fixtory୦Builder୦example୮aArticle) BuildList(n int) []*Article {
	b.index = 0
	products := make([]*Article, 0, n)
	for i := 0; i < n; i++ {
		products = append(products, b.build())
	}
	if b.resetAfterBuild {
		b.factory.Reset()
	}
	return products
}
func (b *instantiate୦fixtory୦Builder୦example୮aArticle) build() *Article {
	product := reflect.New(b.factory.productType.Elem()).Interface().(*Article)
	if b.bluePrint != nil {
		instantiate୦fixtory୦MapNotZeroFields୦example୮aArticle(b.bluePrint(b.factory.index, b.factory.last), product)
	}
	for _, trait := range b.traits {
		instantiate୦fixtory୦MapNotZeroFields୦example୮aArticle(trait, product)
	}
	if len(b.eachParam) > b.index {
		instantiate୦fixtory୦MapNotZeroFields୦example୮aArticle(b.eachParam[b.index], product)
	}
	for _, f := range b.zeroFields {
		uf := reflect.ValueOf(product).Elem().FieldByName(f)
		uf.Set(reflect.Zero(uf.Type()))
	}
	b.factory.last = reflect.ValueOf(product).Elem().Interface().(Article)
	b.index++
	b.factory.index++
	if b.factory.OnBuild != nil {
		b.factory.OnBuild(b.factory.t, product)
	}
	return product
}

//line :1
type instantiate୦fixtory୦BluePrintFunc୦example୮aAuthor func(i int, last Author,) Author
//line article.go2:11
type instantiate୦fixtory୦Builder୦example୮aAuthor struct {
//line article.go2:28
 factory *instantiate୦fixtory୦Factory୦example୮aAuthor

			index     int
//line article.go2:33
 bluePrint func(i int, last Author,
	) Author
//line article.go2:34
 traits          []Author
			eachParam       []Author
			zeroFields      []string
//line article.go2:36
 resetAfterBuild bool
}

//line article.go2:49
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor,
) EachParam(params ...Author,) *instantiate୦fixtory୦Builder୦example୮aAuthor {
	b.eachParam = params
	return b
//line article.go2:52
}
//line article.go2:52
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor,) Zero(fields ...string) *instantiate୦fixtory୦Builder୦example୮aAuthor {
	b.zeroFields = fields
	return b
}
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor) ResetAfter() *instantiate୦fixtory୦Builder୦example୮aAuthor {
	b.resetAfterBuild = true
	return b
}
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor) Build() *Author {
	b.index = 0
	product := b.build()
	if b.resetAfterBuild {
		b.factory.Reset()
	}
	return product
}
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor) Build2() (*Author, *Author) {
	list := b.BuildList(2)
	return list[0], list[1]
}
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor) Build3() (*Author, *Author, *Author) {
	list := b.BuildList(3)
	return list[0], list[1], list[2]
}
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor) BuildList(n int) []*Author {
	b.index = 0
	products := make([]*Author, 0, n)
	for i := 0; i < n; i++ {
		products = append(products, b.build())
	}
	if b.resetAfterBuild {
		b.factory.Reset()
	}
	return products
}
func (b *instantiate୦fixtory୦Builder୦example୮aAuthor) build() *Author {
	product := reflect.New(b.factory.productType.Elem()).Interface().(*Author)
	if b.bluePrint != nil {
		instantiate୦fixtory୦MapNotZeroFields୦example୮aAuthor(b.bluePrint(b.factory.index, b.factory.last), product)
	}
	for _, trait := range b.traits {
		instantiate୦fixtory୦MapNotZeroFields୦example୮aAuthor(trait, product)
	}
	if len(b.eachParam) > b.index {
		instantiate୦fixtory୦MapNotZeroFields୦example୮aAuthor(b.eachParam[b.index], product)
	}
	for _, f := range b.zeroFields {
		uf := reflect.ValueOf(product).Elem().FieldByName(f)
		uf.Set(reflect.Zero(uf.Type()))
	}
	b.factory.last = reflect.ValueOf(product).Elem().Interface().(Author)
	b.index++
	b.factory.index++
	if b.factory.OnBuild != nil {
		b.factory.OnBuild(b.factory.t, product)
	}
	return product
}

//line article_test.go2:96
func instantiate୦fixtory୦MapNotZeroFields୦example୮aArticle(from Article, to *Article,) {
				fromKind := reflect.Indirect(reflect.ValueOf(from)).Type().
//line article_test.go2:99
  Kind()
//line article_test.go2:99
 if fromKind != reflect.
					Struct {
//line article_test.go2:102
  panic(fmt.Sprintf("from must be struct, but got %s",
			fromKind))
//line article_test.go2:103
 }
//line article_test.go2:103
 toKind := reflect.Indirect(reflect.ValueOf(to)).Type().Kind()
				if toKind !=
		reflect.Struct {
//line article_test.go2:105
  panic(fmt.Sprintf("to must be struct, but got %s",

//line article_test.go2:108
   toKind,
		))
//line article_test.go2:109
 }
//line article_test.go2:109
 fromV := reflect.Indirect(reflect.
					ValueOf(from))
//line article_test.go2:110
 toV := reflect.ValueOf(to).Elem()
//line article_test.go2:110
 for i := 0; i < fromV.NumField(); i++ {
					fieldV := fromV.Field(i)
//line article_test.go2:111
  if !fieldV.IsZero() {
//line article_test.go2:111
   toV.
							FieldByName(fromV.Type().Field(i,
//line article.go2:2
    ).
							Name).Set(fieldV,
//line article.go2:5
   )

		}
//line article.go2:7
 }
//line article.go2:7
}

//line article_test.go2:96
func instantiate୦fixtory୦MapNotZeroFields୦example୮aAuthor(from Author, to *Author,) {
				fromKind := reflect.Indirect(reflect.ValueOf(from)).Type().
//line article_test.go2:99
  Kind()
//line article_test.go2:99
 if fromKind != reflect.
					Struct {
//line article_test.go2:102
  panic(fmt.Sprintf("from must be struct, but got %s",
			fromKind))
//line article_test.go2:103
 }
//line article_test.go2:103
 toKind := reflect.Indirect(reflect.ValueOf(to)).Type().Kind()
				if toKind !=
		reflect.Struct {
//line article_test.go2:105
  panic(fmt.Sprintf("to must be struct, but got %s",

//line article_test.go2:108
   toKind,
		))
//line article_test.go2:109
 }
//line article_test.go2:109
 fromV := reflect.Indirect(reflect.
					ValueOf(from))
//line article_test.go2:110
 toV := reflect.ValueOf(to).Elem()
//line article_test.go2:110
 for i := 0; i < fromV.NumField(); i++ {
					fieldV := fromV.Field(i)
//line article_test.go2:111
  if !fieldV.IsZero() {
//line article_test.go2:111
   toV.
							FieldByName(fromV.Type().Field(i,
//line article.go2:2
    ).
							Name).Set(fieldV,
//line article.go2:5
   )

		}
//line article.go2:7
 }
//line article.go2:7
}

//line article.go2:7
var _ = fmt.Errorf

//line article.go2:7
type _ fixtory.Importable୦

//line article.go2:7
var _ = reflect.Append
//line article.go2:7
var _ = testing.AllocsPerRun

//line article.go2:7
const _ = time.ANSIC
